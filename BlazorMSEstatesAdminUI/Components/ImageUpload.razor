@using System.Net.Http.Headers
@inject HttpClient Http

<FluentInputFile @ref="@myFileByStream"
                 AnchorId="MyUploadStream"
                 DragDropZoneVisible="false"
                 Mode="InputFileMode.Stream"
                 Multiple="true"
                 MaximumFileSize="@(20 * 1024 * 1024)"
                 Accept=".jpg, .jpeg, .png, .gif, .bmp, .tiff, .svg, .webp"
                 OnFileUploaded="@OnFileUploadedAsync"
                 OnCompleted="@OnCompleted" />

<FluentProgress Min="0" Max="100" Value="@progressPercent" Visible="@(progressPercent > 0)" />
<FluentLabel Alignment="HorizontalAlignment.Center">
    @progressTitle
</FluentLabel>

<FluentButton Appearance="Appearance.Accent" Id="MyUploadStream">
    Upload files
</FluentButton>


@code
{
    [Parameter] public string? ListingId { get; set; }
    [Parameter]
    public EventCallback OnUploadCompleted { get; set; }
    FluentInputFile? myFileByStream = default!;
    int? progressPercent;
    string? progressTitle;


    async Task OnFileUploadedAsync(FluentInputFileEventArgs file)
    {
        progressPercent = file.ProgressPercent;
        progressTitle = file.ProgressTitle;

        using var content = new MultipartFormDataContent();
        using var streamContent = new StreamContent(file.Stream!);
        streamContent.Headers.ContentType = new MediaTypeHeaderValue("application/octet-stream");
        content.Add(streamContent, "file", file.Name);
        content.Add(new StringContent(ListingId ?? ""), "listingId");

        var response = await Http.PostAsync("api/Listing/UploadImage", content);
        
    }

    void OnCompleted(IEnumerable<FluentInputFileEventArgs> files)
    {
        progressPercent = myFileByStream!.ProgressPercent;
        progressTitle = myFileByStream!.ProgressTitle;
        OnUploadCompleted.InvokeAsync();
    }
}