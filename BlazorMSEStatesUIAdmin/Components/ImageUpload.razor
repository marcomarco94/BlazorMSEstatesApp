@using System.Net.Http.Headers
@inject HttpClient Http

<FluentInputFile @ref="@_myFileByStream"
                 AnchorId="MyUploadStream"
                 DragDropZoneVisible="false"
                 Mode="InputFileMode.Stream"
                 Multiple="true"
                 MaximumFileSize="@(20 * 1024 * 1024)"
                 MaximumFileCount="@(40)"
                 Accept=".jpg, .jpeg, .png, .gif, .bmp, .tiff, .svg, .webp"
                 OnCompleted="@OnCompleted"/>

<FluentProgress Min="0" Max="100" Value="@_progressPercent" Visible="@(_progressPercent > 0)"/>
<FluentLabel Alignment="HorizontalAlignment.Center">
    @_progressTitle
</FluentLabel>

<FluentButton Appearance="Appearance.Accent" Id="MyUploadStream">
    Upload files
</FluentButton>


@code
{
    [Parameter] public string? ListingId { get; set; }
    [Parameter] public EventCallback OnUploadCompleted { get; set; }
    FluentInputFile? _myFileByStream = default!;
    int? _progressPercent;
    string? _progressTitle;

    
    async Task OnCompleted(IEnumerable<FluentInputFileEventArgs> files)
    {
        using var content = new MultipartFormDataContent();
        foreach (var file in files)
        {
            _progressPercent = file.ProgressPercent;
            _progressTitle = file.ProgressTitle;
            var streamContent = new StreamContent(file.Stream!);
            streamContent.Headers.ContentType = new MediaTypeHeaderValue("application/octet-stream");
            content.Add(streamContent, "files", file.Name);
        }

        var response = await Http.PatchAsync($"api/Listings/{ListingId}/images", content);
        if (response.IsSuccessStatusCode)
        {
            _progressPercent = 100;
            _progressTitle = "Upload successful";
            await OnUploadCompleted.InvokeAsync();
        }
        else
        {
            _progressPercent = 0;
            _progressTitle = "Upload failed";
        }
    }
}