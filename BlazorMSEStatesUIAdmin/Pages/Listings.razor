@page "/listings"
@using System.Globalization
@using System.Text.RegularExpressions
@using BlazorMSEstatesUIAdmin.Models
@inject HttpClient Http
@inject NavigationManager NavigationManager
@inject ImageService ImageService
@inject IJSRuntime JS
@inject ListingStateService ListingStateService

<PageTitle>Listings</PageTitle>

<FluentHeader Style="margin: 0 0 15px 0">Listings</FluentHeader>

<FluentGrid Spacing="2">
    <FluentGridItem xs="12" lg="4">
        <ListingsList
            @bind-SelectedListing:get="ListingStateService.SelectedListing"
            @bind-SelectedListing:set="OnSelectedListingChanged"/>
    </FluentGridItem>
    <FluentGridItem xs="12" lg="8">
        @if (ListingStateService.SelectedListing != null)
        {
            <FluentToolbar>
                <FluentButton Appearance="Appearance.Neutral" OnClick="NavigateToEditPictures">Edit Images</FluentButton>
                <FluentButton Appearance="Appearance.Neutral" OnClick="NavigateToFaceBookPost">Edit Facebook Post</FluentButton>
                <FluentButton Appearance="Appearance.Neutral" OnClick="DownloadImagesAsync">Download Images</FluentButton>
            </FluentToolbar>
            <p/>
            <FluentEditForm Model="@ListingStateService.SelectedListing" OnValidSubmit="UpdateListingAsync" FormName="UpdateEntry">
                <FluentStack Orientation="Orientation.Vertical" VerticalGap="10">
                    <FluentStack Orientation="Orientation.Horizontal">
                        <FluentLabel Style="width: 15%; font-size: 1.2em">Token</FluentLabel>
                        <FluentTextField Style="width: 85%; font-size: 1.2em" Value="@_updatedToken" ReadOnly="true"/>
                    </FluentStack>
                    <FluentStack Orientation="Orientation.Horizontal">
                        <FluentLabel Style="width: 15%; font-size: 1.2em">Name</FluentLabel>
                        <FluentTextField Style="width: 85%; font-size: 1.2em" @bind-Value="@ListingStateService.SelectedListing.ListingName"/>
                    </FluentStack>
                    <FluentStack Orientation="Orientation.Horizontal">
                        <FluentLabel Style="width: 15%; font-size: 1.2em">Short description</FluentLabel>
                        <FluentTextField Style="width: 85%; font-size: 1.2em" @bind-Value="@ListingStateService.SelectedListing.ShortDescription"/>
                    </FluentStack>
                    <FluentStack Orientation="Orientation.Horizontal">
                        <FluentLabel Style="width: 15%; font-size: 1.2em">Description</FluentLabel>
                        <div style="width: 85%; font-size: 1.2em">
                            <FluentTextArea Style="width: 100%" Rows="12" Resize="TextAreaResize.Vertical" @bind-Value="@ListingStateService.SelectedListing.Description">
                            </FluentTextArea>
                        </div>
                    </FluentStack>
                    <FluentStack Orientation="Orientation.Horizontal">
                        <FluentLabel Style="width: 15%; font-size: 1.2em">Bedrooms</FluentLabel>
                        <FluentNumberField Style="width: 85%; font-size: 1.2em" @bind-Value="@ListingStateService.SelectedListing.Bedrooms"/>
                    </FluentStack>
                    <FluentStack Orientation="Orientation.Horizontal">
                        <FluentLabel Style="width: 15%; font-size: 1.2em">Bathrooms</FluentLabel>
                        <FluentNumberField Style="width: 85%; font-size: 1.2em" @bind-Value="@ListingStateService.SelectedListing.Bathrooms"/>
                    </FluentStack>
                    <FluentStack Orientation="Orientation.Horizontal">
                        <FluentLabel Style="width: 15%; font-size: 1.2em">Size</FluentLabel>
                        <FluentNumberField Style="width: 85%; font-size: 1.2em" @bind-Value="@ListingStateService.SelectedListing.Size"/>
                    </FluentStack>
                    <FluentStack Orientation="Orientation.Horizontal">
                        <FluentLabel Style="width: 15%; font-size: 1.2em">Price</FluentLabel>
                        <FluentTextField Style="width: 85%; font-size: 1.2em" @bind-Value="FormattedPrice"/>
                    </FluentStack>
                    <FluentStack Orientation="Orientation.Horizontal">
                        <FluentLabel Style="width: 30%; font-size: 1.2em">Features</FluentLabel>
                        <FluentSortableList Style="width: 70%; font-size: 1.2em"
                                            Items="ListingStateService.SelectedListing.Features"
                                            OnUpdate="@SortList">
                            <ItemTemplate Context="feature">
                                @feature
                                <FluentIcon OnClick="() => DeleteFeatureOnClick(feature)" Value="@(new Icons.Regular.Size20.Delete())"/>
                            </ItemTemplate>
                        </FluentSortableList>
                        <FluentStack Orientation="Orientation.Vertical">
                            <FluentTextField Placeholder="New Feature" Style="width: 100%; font-size:1.2em" @bind-Value="_newFeature"></FluentTextField>
                            <FluentButton Style="width: 100%; font-size:1.2em" Appearance="Appearance.Accent" OnClick="AddFeatureOnClick">Add Feature</FluentButton>
                        </FluentStack>
                    </FluentStack>
                    <FluentStack Orientation="Orientation.Horizontal">
                        <FluentLabel Style="width: 15%; font-size: 1.2em">Location</FluentLabel>
                        <FluentSelect Style="width: 85%; font-size: 1.2em"
                                      @bind-Value="@ListingStateService.SelectedListing.Location.Location"
                                      @bind-SelectedOption="_selectedLocation"
                                      @bind-SelectedOption:after="@GenerateListingToken"
                                      Items="_locations"
                                      OptionText="@(l => l.Location)"/>
                    </FluentStack>
                    <FluentStack Orientation="Orientation.Horizontal">
                        <FluentLabel Style="width: 15%; font-size: 1.2em">Category</FluentLabel>
                        <FluentSelect Style="width: 85%; font-size: 1.2em"
                                      @bind-Value="@ListingStateService.SelectedListing.Category.Category"
                                      @bind-SelectedOption="_selectedCategory"
                                      @bind-SelectedOption:after="@GenerateListingToken"
                                      Items="_categories"
                                      OptionText="@(l => l.Category)"/>
                    </FluentStack>
                    <FluentStack Orientation="Orientation.Horizontal">
                        <FluentLabel Style="width: 15%; font-size: 1.2em">Adverstisement Type</FluentLabel>
                        <FluentSelect Style="width: 85%; font-size: 1.2em"
                                      @bind-Value="@ListingStateService.SelectedListing.AdvertisementType.AdvertisementType"
                                      @bind-SelectedOption="_selectedAdvertisementType"
                                      @bind-SelectedOption:after="@GenerateListingToken"
                                      Items="_advertisementTypes"
                                      OptionText="@(l => l.AdvertisementType)"/>
                    </FluentStack>
                    <FluentStack Orientation="Orientation.Horizontal">
                        <FluentLabel Style="width: 15%; font-size: 1.2em">Archived</FluentLabel>
                        <FluentCheckbox Style="width: 85%; font-size: 1.2em" @bind-Value="@ListingStateService.SelectedListing.Archived"/>
                    </FluentStack>
                    <FluentStack Orientation="Orientation.Horizontal">
                        <FluentLabel Style="width: 15%; font-size: 1.2em">Images Count</FluentLabel>
                        <FluentLabel Style="width: 85%; font-size: 1.2em">@ListingStateService.SelectedListing.ImageUrls.Count.ToString() </FluentLabel>
                    </FluentStack>
                    <FluentSelect Style="width: 100%; font-size: 1.2em" Items="_selectMode" @bind-Value="_selectedMode" @bind-Value:after="@GenerateListingToken"></FluentSelect>
                    <FluentButton Style="width: 100%; font-size: 1.2em" Appearance="Appearance.Accent" Type="ButtonType.Submit">@_selectedMode Listing</FluentButton>
                </FluentStack>
            </FluentEditForm>
        }
    </FluentGridItem>
</FluentGrid>

<script>
    window.triggerFileDownload = async (fileName, url) => {
        const response = await fetch(url);
        const blob = await response.blob();
        const blobUrl = window.URL.createObjectURL(blob);

        const anchorElement = document.createElement('a');
        anchorElement.href = blobUrl;
        anchorElement.setAttribute('download', fileName ?? '');
        document.body.appendChild(anchorElement);
        anchorElement.click();
        document.body.removeChild(anchorElement);

        window.URL.revokeObjectURL(blobUrl);
    }
</script>

@code {
    private List<LocationModel>? _locations;
    private LocationModel? _selectedLocation;
    private List<AdvertisementTypeModel>? _advertisementTypes;
    private AdvertisementTypeModel? _selectedAdvertisementType;
    private List<CategoryModel>? _categories;
    private CategoryModel? _selectedCategory;
    private string? _newFeature;
    private string? _updatedToken;

    private readonly List<string> _selectMode = new() { "Update", "Create" };
    private string _selectedMode = "Update";

    private readonly DialogParameters _parameters = new()
    {
        Title = "Info!",
        Width = "500px",
        Height = "200px",
        TrapFocus = true,
        Modal = true,
        PreventScroll = true
    };

    protected override async Task OnInitializedAsync()
    {
        await GetAdditionalProperties();
    }

    private async Task GetAdditionalProperties()
    {
        try
        {
            _locations = await Http.GetFromJsonAsync<List<LocationModel>>("api/Locations");
            _advertisementTypes = await Http.GetFromJsonAsync<List<AdvertisementTypeModel>>("api/AdvertisementTypes");
            _categories = await Http.GetFromJsonAsync<List<CategoryModel>>("api/Categories");
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            throw;
        }
    }

    private string FormattedPrice
    {
        get => ListingStateService.SelectedListing?.Price.ToString("N0", CultureInfo.InvariantCulture) ?? string.Empty;
        set
        {
            if (int.TryParse(value, NumberStyles.AllowThousands, CultureInfo.InvariantCulture, out var result))
            {
                if (ListingStateService.SelectedListing != null)
                {
                    ListingStateService.SelectedListing.Price = result;
                }
            }
        }
    }

    private void SortList(FluentSortableListEventArgs args)
    {
        if (args is null || args.OldIndex == args.NewIndex)
        {
            return;
        }

        var oldIndex = args.OldIndex;
        var newIndex = args.NewIndex;

        var items = ListingStateService.SelectedListing?.Features;
        if (items != null)
        {
            var itemToMove = items[oldIndex];
            items.RemoveAt(oldIndex);

            if (newIndex < items.Count)
            {
                items.Insert(newIndex, itemToMove);
            }
            else
            {
                items.Add(itemToMove);
            }
        }
    }

    private void OnSelectedListingChanged(ListingModel? listing)
    {
        ListingStateService.SelectedListing = listing;
        _selectedCategory = _categories?.FirstOrDefault(c => c.Category == ListingStateService.SelectedListing?.Category?.Category);
        _selectedAdvertisementType = _advertisementTypes?.FirstOrDefault(a => a.AdvertisementType == ListingStateService.SelectedListing?.AdvertisementType?.AdvertisementType);
        _selectedLocation = _locations?.FirstOrDefault(l => l.Location == ListingStateService.SelectedListing?.Location?.Location);
        StateHasChanged();
        GenerateListingToken();
    }

    private void AddFeatureOnClick()
    {
        if (_newFeature == null) return;
        ListingStateService.SelectedListing?.Features?.Add(_newFeature);
        _newFeature = string.Empty;
    }

    private void DeleteFeatureOnClick(string feature)
    {
        if (feature == string.Empty) return;
        ListingStateService.SelectedListing?.Features?.Remove(feature);
    }

    private void GenerateListingToken()
    {
        if (ListingStateService.SelectedListing == null) return;
        var token = _selectedCategory?.Acronym +
                    _selectedAdvertisementType?.Acronym +
                    _selectedLocation?.Acronym;
        if (_selectedMode == "Update")
        {
            var sequenceNuber = Regex.Match(ListingStateService.SelectedListing?.Token, @"\d+").Value;
            _updatedToken = token + sequenceNuber;
        }
        else
        {
            _updatedToken = token + "XXXX";
        }
    }

    private async Task DownloadImagesAsync()
    {
        if (ListingStateService.SelectedListing == null)
        {
            return;
        }

        if (ListingStateService.SelectedListing.ImageUrls != null)
            foreach (var imageUrl in ListingStateService.SelectedListing.ImageUrls)
            {
                var fileName = ListingStateService.SelectedListing.Token + imageUrl;
                var fileUrl = ImageService.GetFullImagePathHq(imageUrl);
                try
                {
                    await JS.InvokeVoidAsync("triggerFileDownload", fileName, fileUrl);
                }
                catch (Exception ex)
                {
                    Console.WriteLine($"Failed to download image {imageUrl}: {ex.Message}");
                }

                await Task.Delay(1000);
            }
    }

    private async Task UpdateListingAsync()
    {
        try
        {
            if (_selectedMode == "Update")
            {
                await Http.PutAsJsonAsync($"api/Listings/{ListingStateService?.SelectedListing?.Id}",
                    ListingStateService?.SelectedListing);
            }
            else
            {
                if (ListingStateService.SelectedListing != null)
                {
                    ListingStateService.SelectedListing.Token = _updatedToken;
                    await Http.PostAsJsonAsync("api/Listings", ListingStateService.SelectedListing);
                }
            }

            await RefreshAllListingsAsync();
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            throw;
        }

        StateHasChanged();
    }

    private async Task RefreshAllListingsAsync()
    {
        try
        {
            ListingStateService.Listings = ListingStateService.FilteredItems = await Http.GetFromJsonAsync<List<ListingModel>>("api/Listings/no-cache");
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            throw;
        }
    }

    private void NavigateToEditPictures()
    {
        var baseUri = NavigationManager.BaseUri;
        var relativePath = $"{baseUri}edit-pictures/{ListingStateService.SelectedListing?.Id}";
        NavigationManager.NavigateTo(relativePath);
    }

    private void NavigateToFaceBookPost()
    {
        var baseUri = NavigationManager.BaseUri;
        var relativePath = $"{baseUri}facebook-post/{ListingStateService.SelectedListing?.Id}";
        NavigationManager.NavigateTo(relativePath);
    }

}